//
// Copyright 2023 Tobias Strauch, Munich, Bavaria
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//

//////////////////////////////////////////////////////////////////////////////////////
/// Write SystemVerilog sub-module
/////////////////////////////////////////////////////////////////////////////////
string writeSubModule (string &header, 
                       NODE* dbSubModuleNode, 
                       bool trueModuleFalseInstance);
/////////////////////////////////////////////////////////////////////////////////
/// Clean SystemVerilog "always" logic cone
///////////////////////////////////////////////////////////////////////////////// 
NODE* cleanSVConeAlways (NODE* tmpNode);
/////////////////////////////////////////////////////////////////////////////////
/// Clean SystemVerilog "unique" logic cone
///////////////////////////////////////////////////////////////////////////////// 
void cleanSVConeUnique (NODE* node);
/////////////////////////////////////////////////////////////////////////////////
/// Clean SystemVerilog loop index
///////////////////////////////////////////////////////////////////////////////// 
string cleanSVConeLoopIndex (NODE* tmpNode, 
                             NODE* signalTree);
/////////////////////////////////////////////////////////////////////////////////
/// Add SystemVerilog loop entry
///////////////////////////////////////////////////////////////////////////////// 
string addLoop (string signalName, 
                string loopVar);
/////////////////////////////////////////////////////////////////////////////////
/// Insert X assignment in lowest dimension
///////////////////////////////////////////////////////////////////////////////// 
string insertXAssignmentDim (string signalName,
                             NODE* dim0TypeNode,
                             unsigned loopDim,
                             NODE* nextTypeNode,
                             NODE* dbModuleTypesNode);
/////////////////////////////////////////////////////////////////////////////////
/// Insert X assignment
///////////////////////////////////////////////////////////////////////////////// 
string insertXAssignment (string signalName,
                          NODE* typeNode,
                          NODE* dbModuleTypesNode);
/////////////////////////////////////////////////////////////////////////////////
/// Clean SystemVerilog logic cone
///////////////////////////////////////////////////////////////////////////////// 
string cleanSVCone (NODE* coneNode, 
                    bool trueBlockingFalseNonBlocking, 
                    bool insertX,
                    string signalName,
                    NODE* typeNode,
                    NODE* dbModuleTypesNode,
                    NODE* signalTree);
/////////////////////////////////////////////////////////////////////////////////
/// Check type dependency, 
/// gets individual SV_DATA_TYPE node, 
/// returns false if sub-type not printed yet.
///////////////////////////////////////////////////////////////////////////////// 
bool checkTypeDependency (NODE* dataTypeNode, 
                          NODE* doneSiNode);
/////////////////////////////////////////////////////////////////////////////////
/// Write SystemVerilog module
///////////////////////////////////////////////////////////////////////////////// 
string writeSystemVerilogModule (NODE* modNode);
/////////////////////////////////////////////////////////////////////////////////
/// Mark printed module
/////////////////////////////////////////////////////////////////////////////////
void markModulePrint (NODE* node, 
                      bool trueModuleFalseInstance);
/////////////////////////////////////////////////////////////////////////////////
/// Check if sub-module already printed
/////////////////////////////////////////////////////////////////////////////////
bool checkSubModulePrint (NODE* node, 
                          bool trueModuleFalseInstance);
/////////////////////////////////////////////////////////////////////////////////
/// Uniquify module to be written
/////////////////////////////////////////////////////////////////////////////////
bool uniquifyWriteModule (NODE* node, 
                          string &header, 
                          string &outputDir);
/////////////////////////////////////////////////////////////////////////////////
/// write SystemVerilog package
/////////////////////////////////////////////////////////////////////////////////
void writePackage (NODE* node, 
                   string &header, 
                   string &out);
/////////////////////////////////////////////////////////////////////////////////
/// write SystemVerilog code
/////////////////////////////////////////////////////////////////////////////////
void writeSystemVerilog (NODE* topModuleNode, 
                         string &outputDir);
